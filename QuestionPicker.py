from random import choice

def main():
    completed_questions = [
        "(Arrays & Hashing) Contains Duplicate",
        "(Arrays & Hashing) Valid Anagram",
        "(Arrays & Hashing) Two Sum",
        "(Arrays & Hashing) Group Anagrams",
        "(Arrays & Hashing) Top K Frequent Elements",
        "(Arrays & Hashing) Encode and Decode Strings",
        "(Arrays & Hashing) Product of Array Except Self",
        "(Arrays & Hashing) Valid Sudoku", 
        "(Arrays & Hashing) Longest Consecutive Sequence",
        "(Arrays & Hashing) Hand of Straights",
        "(Arrays & Hashing) Merge Sorted Array",
        "(Two Pointers) Valid Palindrome",
        "(Two Pointers) Two Sum II Input Array is Sorted",
        "(Two Pointers) 3Sum", 
        "(Two Pointers) Container with Most Watter",
        "(Two Pointers) Trapping Rain Water",
        "(Two Pointers) Longest Palindromic Substring",
        "(Two Pointers) Palindromic Substrings",
        "(Stack) Valid Parentheses",
        "(Stack) Min Stack",
        "(Stack) Evaluate Reverse Polish Notation",
        "(Stack) Generate Parentheses",
        "(Stack) Daily Temperatures",
        "(Stack) Car Fleet",
        "(Stack) Largest Rectangle in Histogram",
        "(Binary Search) Binary Search",
        "(Binary Search) Search a 2D Matrix",
        "(Binary Search) Koko Eating Bananas", 
        "(Binary Search) Find Minimum in Rotated Sorted Array",
        "(Binary Search) Search in Rotated Sorted Array",
        "(Binary Search) Time Based Key-Value Store",
        "(Binary Search) Find Median of Two Sorted Arrays",
        "(Sliding Window) Best Time to Buy and Sell Stock",
        "(Sliding Window) Longest Substring Without Repeating Characters",
        "(Sliding Window) Longest Repeating Character Replacement",
        "(Sliding Window) Permutation in String",
        "(Sliding Window) Minimum Window Substring",
        "(Sliding Window) Sliding Window Maximum",
        "(Linked List) Reverse Linked List",
        "(Linked List) Merge Two Sorted Lists",
        "(Linked List) Reorder List",
        "(Linked List) Remove Nth Node From End of List",
        "(Linked List) Copy List with Random Pointer",
        "(Linked List) Add Two Numbers", 
        "(Linked List) Linked List Cycle",
        "(Linked List) Find the Duplicate Number",
        "(Linked List) LRU Cache", 
        "(Linked List) Merge K Sorted Lists",
        "(Linked List) Reverse Nodes in k-Group",
        "(Trees) Invert Binary Tree",
        "(Trees) Maximum Depth of Binary Tree", 
        "(Trees) Diameter of Binary Tree",
        "(Trees) Balanced Binary Tree",
        "(Trees) Same Tree",
        "(Trees) Subtree of Another Tree", 
        "(Trees) Lowest Common Ancestor of a Binary Search Tree",
        "(Trees) Binary Tree Level Order Traversal",
        "(Trees) Binary Tree Right Side View",
        "(Trees) Count Good Nodes in Binary Tree",
        "(Trees) Vaidate Binary Search Tree", 
        "(Trees) Kth Smallest Element in a Bst",
        "(Trees) Construct Binary Tree From Preorder and Inorder Traversal",
        "(Trees) Binary Tree Maximum Path Sum",
        "(Trees) Serialize and Deserialize Binary Tree",
        "(Backtracking) Subsets",
        "(Backtracking) Combination Sum",
        "(Backtracking) Permutations", 
        "(Backtracking) Combination Sum II",
        "(Backtracking) Subsets II",
        "(Backtracking) Word Search",
        "(Backtracking) Palindrome Partitioning",
        "(Backtracking) Letter Combinations of a Phone Number",
        "(Backtracking) N-Queens",
        "(Tries) Implement Trie (Prefix Tree)",
        "(Tries) Design Add and Search Words Data Structure",
        "(Tries) Word Search II",
        "(Heap/Priority Queue) Kth Largest Element in a Stream",
        "(Heap/Priority Queue) Last Stone Weight",
        "(Heap/Priority Queue) K Closest Points to Origin",
        "(Heap/Priority Queue) Kth Largest Element in an Array",
        "(Heap/Priority Queue) Task Scheduler",
        "(Heap/Priority Queue) Design Twitter",
        "(Heap/Priority Queue) Find Median from Data Stream",
        "(Dynamic Programming) Climbing Stairs",
        "(Dynamic Programming) Min Cost Climbing Stairs",
        "(Dynamic Programming) House Robber",
        "(Dynamic Programming) House Robber II",
        "(Dynamic Programming) Decode Ways",
        "(Dynamic Programming) Coin Change", 
        "(Dynamic Programming) Maximum Product Subarray", 
        "(Dynamic Programming) Longest Increasing Subsequence",
        "(Dynamic Programming) Word Break",
        "(Dynamic Programming) Partition Equal Subset Sum"
        "(Graphs) Number of Islands", 
        "(Graphs) Max Area of Island",
        "(Graphs) Clone Graph",
        "(Graphs) Walls and Gates", 
        "(Graphs) Rotting Oranges",
        "(Graphs) Pacific Atlantic Water Flow",
        "(Graphs) Surrounded Regions",
        "(Graphs) Course Schedule",
        "(Graphs) Course Schedule II",
        "(Graphs) Graph Valid Tree",
        "(Graphs) Number of Connected Components in an Undirected Graph",
        "(Graphs) Redundant Connection",
        "(Graphs) Word Ladder",
        "(Greedy) Maximum Subarray",
        "(Greedy) Jump Game",
        "(Greedy) Jump Game II",
        "(Greedy) Gas Station",
        "(Greedy) Hand of Straights",
        "(2D Dynamic Programming) Unique Paths",
        "(2D Dynamic Programming) Longest Common Subsequence",
        "(2D Dynamic Programming) Coin Change 2",
        "(2D Dynamic Programming) Best Time to Buy and Sell Stock with Cooldown",
        "(2D Dynamic Programming) Target Sum",
        "(Intervals) Merged Intervals",
        "(Intervals) Insert Interval",
        "(Intervals) Non-overlapping Intervals",
    ]

    print("Question to Revise:", choice(completed_questions))

if __name__ == "__main__":
    main()
